#std import

$Vector struct
	$data member
	$size member
	$capacity member
end

$Vector.init method ( Vector:this -- )
	0 this Vector.data store
	0 this Vector.size store
	0 this Vector.capacity store
end

$Vector.free method ( Vector:this -- )
	this Vector.data fetch free
	this Vector.init
end

$Vector.reserve method ( u:size Vector:this -- b )
	$size set
	this Vector.capacity fetch size >= if
		true return
	end
	1 $capacity set
	size 0 > if
		loop
			capacity size <=
		while
			1 $capacity <<set
		end
	end
	this Vector.capacity fetch size < if
		this Vector.capacity fetch if
			capacity cells this Vector.data fetch resize this Vector.data store
			this Vector.data fetch 0 = if false return end
		else
			this Vector.data capacity cells alloc over store fetch 0 = if false return end
		end
		capacity this Vector.capacity store
	end
	true
end

$Vector.resize method ( u:size Vector:this -- b )
	$size set
	size this Vector.reserve if
		size this Vector.size store
		true
	else false
	end
end

$Vector.push_back method ( x:item Vector:this -- b )
	$item set
	this dup Vector.size fetch 1 + swap Vector.resize if
		item this dup Vector.size fetch 1 - swap Vector.data fetch at store
		true
	else false
	end
end

$Vector.pop_back method ( Vector:this -- b )
	this Vector.size fetch if
		this Vector.size --store
		true
	else false
	end
end

#Vector.at {
	Vector.data fetch at
} define ( u Vector -- addr )

#Vector.front {
	Vector.data fetch
} define ( Vector -- addr )

#Vector.back {
	dup Vector.size fetch 1 - swap Vector.data fetch at
} define ( Vector -- addr )

#Vector.foreach {
	dup Vector.data fetch
	swap Vector.size fetch
	loop
		dup 0 >
	while
		swap dup fetch eval
		1 cells + swap 1 -
	end
	2drop
} define ( #_code Vector -- )