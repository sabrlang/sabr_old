#true #-1 define ( -- b )
#false #0 define ( -- b )
#null #0 define ( -- addr )
#not { 0 = } define ( x -- b )
#buf { 0 != } define ( x -- b )
#and { buf swap buf & } define ( x1 x2 -- b )
#or { buf swap buf | } define ( x1 x2 -- b )
#select { if drop else nip end } define ( x1 x2 b -- x )

#++set { dup call ++ swap set } define ( id -- )
#--set { dup call -- swap set } define ( id -- )
#~set { dup call ~ swap set } define ( id -- )

#+set { dup call rot + swap set } define ( n id -- )
#-set { dup call rot - swap set } define ( n id -- )
#*set { dup call rot * swap set } define ( n id -- )
#/set { dup call rot / swap set } define ( n id -- )
#%set { dup call rot % swap set } define ( n id -- )
#f+set { dup call rot f+ swap set } define ( f id -- )
#f-set { dup call rot f- swap set } define ( f id -- )
#f*set { dup call rot f* swap set } define ( f id -- )
#f/set { dup call rot f/ swap set } define ( f id -- )
#f%set { dup call rot f% swap set } define ( f id -- )
#<<set { dup call rot << swap set } define ( x id -- )
#>>set { dup call rot >> swap set } define ( x id -- )
#&set { dup call rot & swap set } define ( x id -- )
#|set { dup call rot | swap set } define ( x id -- )
#^set { dup call rot ^ swap set } define ( x id -- )

#++store { dup fetch ++ swap store } define ( addr -- )
#--store { dup fetch -- swap store } define ( addr -- )
#~store { dup fetch ~ swap store } define ( addr -- )

#+store { dup fetch rot + swap store } define ( n addr -- )
#-store { dup fetch rot - swap store } define ( n addr -- )
#*store { dup fetch rot * swap store } define ( n addr -- )
#/store { dup fetch rot / swap store } define ( n addr -- )
#%store { dup fetch rot % swap store } define ( n addr -- )
#f+store { dup fetch rot f+ swap store } define ( f addr -- )
#f-store { dup fetch rot f- swap store } define ( f addr -- )
#f*store { dup fetch rot f* swap store } define ( f addr -- )
#f/store { dup fetch rot f/ swap store } define ( f addr -- )
#f%store { dup fetch rot f% swap store } define ( f addr -- )
#<<store { dup fetch rot << swap store } define ( x addr -- )
#>>store { dup fetch rot >> swap store } define ( x addr -- )
#&store { dup fetch rot & swap store } define ( x addr -- )
#|store { dup fetch rot | swap store } define ( x addr -- )
#^store { dup fetch rot ^ swap store } define ( x addr -- )

#cr { '\n' putc } define ( -- )
#space { ' ' putc } define ( -- )
#putcn {
	loop dup 0 > while swap putc -- end drop
} define ( ... c u -- )
#putcnln { putcn cr } define ( ... c u -- )

#cells { 8 * } define ( u -- u )
#at { swap 8 * + } define ( u addr -- addr )
#alloc~? { alloc dup not if } define ( u -- addr )

#method {
	func $this set
} define ( id -- )

\ #for {
\ 	trot tdup eval -- trot trot tdup #$ tswap concat eval set \ _start -- $var set
\ 	loop
\ 		tdup #$ tswap concat eval dup call ++ swap set \ $var dup call ++ swap set
\ 		tdup eval tdrop tnip eval < \ _var _end <
\ 	while
\ 		\ code
\ } define ( #_start #_end #_var -- )

\ #-for {
\ 	trot tdup eval ++ trot trot tdup #$ tswap concat eval set \ _start ++ $var set
\ 	loop
\ 		tdup #$ tswap concat eval dup call -- swap set \ $var dup call -- swap set
\ 		tdup eval tdrop tnip eval > \ _var _end <
\ 	while
\ 		\ code
\ } define ( #_start #_end #_var -- )